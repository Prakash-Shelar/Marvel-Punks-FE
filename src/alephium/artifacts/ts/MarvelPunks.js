/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  addStdIdToFields,
  callMethod,
  Contract,
  ContractFactory,
  ContractInstance,
  encodeContractFields,
  fetchContractState,
  multicallMethods,
  signExecuteMethod,
  testMethod,
} from '@alephium/web3';
import { default as MarvelPunksContractJson } from '../MarvelPunks.ral.json';
import { getContractByCodeHash } from './contracts';

class Factory extends ContractFactory {
  encodeFields(fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      [],
    );
  }

  at(address) {
    return new MarvelPunksInstance(address);
  }

  tests = {
    getTokenUri: async params => {
      return testMethod(this, 'getTokenUri', params, getContractByCodeHash);
    },
    getCollectionIndex: async params => {
      return testMethod(
        this,
        'getCollectionIndex',
        params,
        getContractByCodeHash,
      );
    },
  };

  stateForTest(initFields, asset, address) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const MarvelPunks = new Factory(
  Contract.fromJson(
    MarvelPunksContractJson,
    '',
    '4897086210869e612d82995b765a447c5319a55a56e8a0c3c07b4d9ca81e15b1',
    [],
  ),
);

// Use this class to interact with the blockchain
export class MarvelPunksInstance extends ContractInstance {
  constructor(address) {
    super(address);
  }

  async fetchState() {
    return fetchContractState(MarvelPunks, this);
  }

  view = {
    getTokenUri: async params => {
      return callMethod(
        MarvelPunks,
        this,
        'getTokenUri',
        params === undefined ? {} : params,
        getContractByCodeHash,
      );
    },
    getCollectionIndex: async params => {
      return callMethod(
        MarvelPunks,
        this,
        'getCollectionIndex',
        params === undefined ? {} : params,
        getContractByCodeHash,
      );
    },
  };

  transact = {
    getTokenUri: async params => {
      return signExecuteMethod(MarvelPunks, this, 'getTokenUri', params);
    },
    getCollectionIndex: async params => {
      return signExecuteMethod(MarvelPunks, this, 'getCollectionIndex', params);
    },
  };

  async multicall(...callss) {
    return await multicallMethods(
      MarvelPunks,
      this,
      callss,
      getContractByCodeHash,
    );
  }
}
