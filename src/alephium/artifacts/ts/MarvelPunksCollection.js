/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  addStdIdToFields,
  callMethod,
  Contract,
  ContractFactory,
  ContractInstance,
  encodeContractFields,
  fetchContractState,
  multicallMethods,
  signExecuteMethod,
  testMethod,
} from '@alephium/web3';
import { default as MarvelPunksCollectionContractJson } from '../MarvelPunksCollection.ral.json';
import { getContractByCodeHash } from './contracts';

class Factory extends ContractFactory {
  encodeFields(fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      [],
    );
  }

  consts = {
    ErrorCodes: {
      IncorrectTokenIndex: BigInt('0'),
      NFTNotFound: BigInt('1'),
      NFTNotPartOfCollection: BigInt('2'),
    },
  };

  at(address) {
    return new MarvelPunksCollectionInstance(address);
  }

  tests = {
    getCollectionUri: async params => {
      return testMethod(
        this,
        'getCollectionUri',
        params,
        getContractByCodeHash,
      );
    },
    totalSupply: async params => {
      return testMethod(this, 'totalSupply', params, getContractByCodeHash);
    },
    nftByIndex: async params => {
      return testMethod(this, 'nftByIndex', params, getContractByCodeHash);
    },
    validateNFT: async params => {
      return testMethod(this, 'validateNFT', params, getContractByCodeHash);
    },
    mint: async params => {
      return testMethod(this, 'mint', params, getContractByCodeHash);
    },
  };

  stateForTest(initFields, asset, address) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const MarvelPunksCollection = new Factory(
  Contract.fromJson(
    MarvelPunksCollectionContractJson,
    '',
    '087f9292bb326a4d39a6fac09928cb25edf2837718f830f3a166a937f8724779',
    [],
  ),
);

// Use this class to interact with the blockchain
export class MarvelPunksCollectionInstance extends ContractInstance {
  constructor(address) {
    super(address);
  }

  async fetchState() {
    return fetchContractState(MarvelPunksCollection, this);
  }

  view = {
    getCollectionUri: async params => {
      return callMethod(
        MarvelPunksCollection,
        this,
        'getCollectionUri',
        params === undefined ? {} : params,
        getContractByCodeHash,
      );
    },
    totalSupply: async params => {
      return callMethod(
        MarvelPunksCollection,
        this,
        'totalSupply',
        params === undefined ? {} : params,
        getContractByCodeHash,
      );
    },
    nftByIndex: async params => {
      return callMethod(
        MarvelPunksCollection,
        this,
        'nftByIndex',
        params,
        getContractByCodeHash,
      );
    },
    validateNFT: async params => {
      return callMethod(
        MarvelPunksCollection,
        this,
        'validateNFT',
        params,
        getContractByCodeHash,
      );
    },
    mint: async params => {
      return callMethod(
        MarvelPunksCollection,
        this,
        'mint',
        params,
        getContractByCodeHash,
      );
    },
  };

  transact = {
    getCollectionUri: async params => {
      return signExecuteMethod(
        MarvelPunksCollection,
        this,
        'getCollectionUri',
        params,
      );
    },
    totalSupply: async params => {
      return signExecuteMethod(
        MarvelPunksCollection,
        this,
        'totalSupply',
        params,
      );
    },
    nftByIndex: async params => {
      return signExecuteMethod(
        MarvelPunksCollection,
        this,
        'nftByIndex',
        params,
      );
    },
    validateNFT: async params => {
      return signExecuteMethod(
        MarvelPunksCollection,
        this,
        'validateNFT',
        params,
      );
    },
    mint: async params => {
      return signExecuteMethod(MarvelPunksCollection, this, 'mint', params);
    },
  };

  async multicall(...callss) {
    return await multicallMethods(
      MarvelPunksCollection,
      this,
      callss,
      getContractByCodeHash,
    );
  }
}
